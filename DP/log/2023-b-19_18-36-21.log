[2023-03-19 18:36:21] - Arguments: Namespace(beta=0.05, data_size=100, dataset_path='./data/adult.csv', delta=0.1, domain_path='./data/adult-domain.json', epsilon=1.0, iteration=2500, sparse_ratio=10)
[2023-03-19 18:36:21] - ******** Initialization ********
[2023-03-19 18:36:21] - Data sparsification complete
[2023-03-19 18:36:21] - Data information: {'age': 85, 'workclass': 9, 'fnlwgt': 100, 'education-num': 16, 'marital-status': 7, 'occupation': 15, 'relationship': 6, 'race': 5, 'sex': 2, 'capital-gain': 100, 'capital-loss': 100, 'hours-per-week': 99, 'native-country': 42, 'income>50K': 2}
[2023-03-19 18:36:21] - ******** Create Dynamic Tree ********
[2023-03-19 18:36:24] - The dynamic interval tree consists of nodes: [
Node index: 1, height: 0, right_ancestor_index: 2, left_ancestor_index: None, right_child: None, left_child: None, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
, 
Node index: 2, height: 1, right_ancestor_index: 4, left_ancestor_index: None, right_child: 3, left_child: 1, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
, 
Node index: 3, height: 0, right_ancestor_index: None, left_ancestor_index: 2, right_child: None, left_child: None, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
, 
Node index: 4, height: 2, right_ancestor_index: 8, left_ancestor_index: None, right_child: 6, left_child: 2, 
 df:    age workclass fnlwgt education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income>50K
0   19         3      4             4              0          9            2    4   1            0            0             39              0          0
1   13         0     17            10              2          5            3    0   1            0            0             42              0          0
2   34         1      4            12              0          4            2    0   1            0            0             12              0          0
3   14         0      7             8              0          3            0    1   0            0           31             34             41          0
4    3         0     10             8              2          1            1    0   1            0            0             39              0          0
5   43         0     10             8              0          3            2    0   1            0            0             47              0          0
6   24         0     12            15              0          5            2    0   1            0            0             59              0          1
7   37         0     22             8              1          3            1    0   0            0            0             34              0          0
8   24         0      1            11              0          8            2    0   1            0            0             39              0          0
9   16         3     16             8              2          2            1    4   1            0            0             39              0          0
10   3         0     35             8              6          8            0    0   0            0            0             24              0          0
11  12         0     11             9              1          8            3    0   0            0            0             39              0          0
12  33         2     12             9              0          4            2    0   1            0            0             49              0          1
13  21         0     18             9              0          4            2    4   1            0            0             79              0          1
14  18         0     15             3              0         10            2    2   1            0            0             44             20          0
15   9         8     12             9              2         14            1    0   1            0            0             39              0          0
16  15         0     20            12              3          3            1    4   0            0            0             39              0          0
, 
Node index: 5, height: 0, right_ancestor_index: 6, left_ancestor_index: None, right_child: None, left_child: None, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
]
[2023-03-19 18:36:24] - Infinite Private Partitioning: s0: 0, j: 5, T: 65536, beta: 2.883135391252616e-07, C: 1878.9903538693616, epsilon: 0.1, 
 segment: [0, 2, 4, 16, 256, 1199]
[2023-03-19 18:36:24] - ******** Testing Started ********
[2023-03-19 18:36:24] - -------- Testing on node 1 Started --------
[2023-03-19 18:36:24] - At node with index 1, we implement queries on cliques dict_keys(['age']):
[2023-03-19 18:36:24] - Ground truth: gives answer: 
[0 0 0 0 0 0 0 0 0 0]
[2023-03-19 18:36:50] - Golden standard: data vector for original dataset is: 
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
[2023-03-19 18:36:50] - Golden standard: data vector for approximate dataset is: 
[0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
[2023-03-19 18:36:50] - epsilon 1.0
[2023-03-19 18:36:50] - Golden standard: gives answer: 
[0 0 1 0 0 0 0 0 1 0]
[2023-03-19 18:36:50] - Mechanism: 
Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
[2023-03-19 18:36:50] - Mechanism: epsilon during the algorithm 0
[2023-03-19 18:37:23] - Mechanism: gives answer 
[0 0 0 0 1 0 0 0 1 0]
[2023-03-19 18:37:23] - The testing is implemented at age
[2023-03-19 18:37:23] - Ground truth: gives answer: 
[0 0 0 0 0 0 0 0 0 0]
[2023-03-19 18:37:23] - Golden standard: gives answer: 
[0 0 1 0 0 0 0 0 1 0]
[2023-03-19 18:37:23] - Mechanism: gives answer: 
[0 0 0 0 1 0 0 0 1 0]
[2023-03-19 18:37:23] - Mean Square Error of ground truth and golden standard: 0.2
[2023-03-19 18:37:23] - Mean Square Error of ground truth and mechanism: 0.2
[2023-03-19 18:37:23] - Mean Square Error of golden standard and mechanism: 0.2
[2023-03-19 18:37:23] - Measurement1: 0.1
[2023-03-19 18:37:23] - Measurement2: 0.8333333333333334
[2023-03-19 18:37:23] - -------- Testing on node 1 Finished --------
[2023-03-19 18:37:23] - -------- Testing on node 2 Started --------
[2023-03-19 18:37:23] - At node with index 2, we implement queries on cliques dict_keys(['age']):
[2023-03-19 18:37:23] - Ground truth: gives answer: 
[0 0 0 0 0 0 0 0 0 0]
[2023-03-19 18:37:53] - Golden standard: data vector for original dataset is: 
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
[2023-03-19 18:37:53] - Golden standard: data vector for approximate dataset is: 
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
[2023-03-19 18:37:53] - epsilon 1.0
[2023-03-19 18:37:53] - Golden standard: gives answer: 
[1 0 0 1 0 1 0 1 0 0]
