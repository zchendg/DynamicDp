[2023-03-18 23:28:49] - Arguments: Namespace(beta=0.05, data_size=100, dataset_path='./data/adult.csv', delta=0.1, domain_path='./data/adult-domain.json', epsilon=100.0, iteration=500, sparse_ratio=10)
[2023-03-18 23:28:49] - ******** Initialization ********
[2023-03-18 23:28:49] - Data sparsification complete
[2023-03-18 23:28:49] - Data information: {'age': 85, 'workclass': 9, 'fnlwgt': 100, 'education-num': 16, 'marital-status': 7, 'occupation': 15, 'relationship': 6, 'race': 5, 'sex': 2, 'capital-gain': 100, 'capital-loss': 100, 'hours-per-week': 99, 'native-country': 42, 'income>50K': 2}
[2023-03-18 23:28:49] - ******** Create Dynamic Tree ********
[2023-03-18 23:28:52] - The dynamic interval tree consists of nodes: [
Node index: 1, height: 0, right_ancestor_index: 2, left_ancestor_index: None, right_child: None, left_child: None, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
, 
Node index: 2, height: 1, right_ancestor_index: 4, left_ancestor_index: None, right_child: 3, left_child: 1, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
, 
Node index: 3, height: 0, right_ancestor_index: None, left_ancestor_index: 2, right_child: None, left_child: None, 
 df:   age workclass fnlwgt education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income>50K
0  18         0     15             3              0         10            2    2   1            0            0             44             20          0
, 
Node index: 4, height: 2, right_ancestor_index: 8, left_ancestor_index: None, right_child: 6, left_child: 2, 
 df:    age workclass fnlwgt education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income>50K
0   37         0     15             6              0          6            2    4   1            0            0             39              0          0
1    9         1     11             8              2          9            1    0   1            0            0             34              0          0
2   15         0      2            13              2          5            3    0   0           14            0             49              0          1
3   23         0     23             8              1          4            3    0   1            0            0             79              0          0
4   43         0     10             8              0          3            2    0   1            0            0             47              0          0
5    3         0     35             8              6          8            0    0   0            0            0             24              0          0
6   30         0      2             8              0          2            0    0   0            0            0             39              0          0
7    3         0      6             9              2          5            1    0   1            0            0             31              0          0
8   33         0     10             4              5          2            3    4   0            0            0             15             18          0
9   18         4     14            12              0         12            2    0   1            0            0             39              0          1
10   2         0     14             8              2          2            1    0   0            0            0             29             41          0
11  33         0     12             8              0          1            2    0   1            0            0             39              0          0
12  28         0      7            13              1          4            5    0   0            0            0             39              0          0
13  21         0     18             9              0          4            2    4   1            0            0             79              0          1
14  28         0     22             8              1          1            3    0   0           14            0             39              0          1
15  21         0     18             9              1          1            5    0   0            0            0             39              0          0
16  41         0     16            10              0          5            2    0   1            0            0             39              0          0
, 
Node index: 5, height: 0, right_ancestor_index: 6, left_ancestor_index: None, right_child: None, left_child: None, 
 df: Empty DataFrame
Columns: [age, workclass, fnlwgt, education-num, marital-status, occupation, relationship, race, sex, capital-gain, capital-loss, hours-per-week, native-country, income>50K]
Index: []
]
[2023-03-18 23:28:52] - Infinite Private Partitioning: s0: 0, j: 5, T: 65536, beta: 2.883135391252616e-07, C: 1878.9903538693616, epsilon: 0.1, 
 segment: [0, 2, 4, 16, 256, 1199]
[2023-03-18 23:28:52] - ******** Testing Started ********
[2023-03-18 23:28:52] - At node with index 4, we implement queries on cliques dict_keys(['age']):
[2023-03-18 23:28:52] - Ground truth: gives answer: 
[ 70 154 156  96   0 140   0 196   4   4 198 186 150   8  18   0 180  56
 198  26  54  90   2 192   0 154  34  10 174 166  10   0 154 176 110 168
   2 194   2  62   6   2  44   4 150 198  84 116   0 198 100 118   0 110
   2   4  36 156   2  66  76   0  42  24 100 150 146  76  68  32  56 200
 164  46   8   2 190   0   0  82   2   2   2 166   0  42   0  62   8 106
  92   2   0  66 146  66   0 170  14  28]
[2023-03-18 23:28:58] - Golden standard: data vector for original dataset is: 
[ 0.  0.  6.  6.  2.  2.  2.  6.  2.  8.  0.  2.  6.  8. 12. 10.  8.  2.
  4.  4.  2.  8.  4.  4.  6.  4.  4.  8.  4.  2.  4.  4. 10. 10.  4.  0.
  4. 10.  4.  0.  2.  4.  0.  4.  0.  0.  0.  0.  0.  0.  0.  2.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  2.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
[2023-03-18 23:28:58] - Golden standard: data vector for approximate dataset is: 
[ 0.  0.  6.  6.  2.  2.  2.  6.  2.  8.  0.  2.  6.  8. 12. 10.  8.  2.
  4.  4.  2.  8.  4.  4.  6.  4.  4.  8.  4.  2.  4.  4. 10. 10.  4.  0.
  4. 10.  4.  0.  2.  4.  0.  4.  0.  0.  0.  0.  0.  0.  0.  2.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  2.  0.  0.  0.  0.  0.  0.  0.  0.
  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
[2023-03-18 23:28:58] - epsilon 100.0
[2023-03-18 23:28:58] - Golden standard: gives answer: 
[ 69 154 156  95   0 141   0 196   4   5 198 187 150   9  17   0 180  55
 198  25  53  91   2 192   0 154  33  10 174 166  10   0 154 176 111 168
   2 194   2  61   6   2  44   4 150 198  83 116   0 198 101 119   1 109
   2   5  35 156   2  65  75   0  43  24 100 151 146  75  69  32  57 200
 164  45   8   3 190   0   0  81   2   2   2 166   0  42   0  61   8 106
  91   2   0  65 146  65   0 170  13  27]
[2023-03-18 23:29:04] - Mechanism: gives answer 
[ 616  523  688  698   42  418   14  686  249  473  728 1112  701  558
   43   14  541  171  797  334  433  267  319  807  126  441  335  154
  845  858   98   42  537  930  301  498  179  932  181  282  182   28
   88  193  424  851  253  518    0  796  307  880  182  782  152  487
  586  633   28  671  367    0  113  103  852  400  466  490  196   85
  132  935  746  446   42  431  585   70  168  310  238  235   97  872
   56  177   14  379  112  323  727  236   28  587  466  227   42  582
  112  183]
[2023-03-18 23:29:04] - The testing is implemented at age
[2023-03-18 23:29:04] - Ground truth: gives answer: 
[ 70 154 156  96   0 140   0 196   4   4 198 186 150   8  18   0 180  56
 198  26  54  90   2 192   0 154  34  10 174 166  10   0 154 176 110 168
   2 194   2  62   6   2  44   4 150 198  84 116   0 198 100 118   0 110
   2   4  36 156   2  66  76   0  42  24 100 150 146  76  68  32  56 200
 164  46   8   2 190   0   0  82   2   2   2 166   0  42   0  62   8 106
  92   2   0  66 146  66   0 170  14  28]
[2023-03-18 23:29:04] - Golden standard: gives answer: 
[ 69 154 156  95   0 141   0 196   4   5 198 187 150   9  17   0 180  55
 198  25  53  91   2 192   0 154  33  10 174 166  10   0 154 176 111 168
   2 194   2  61   6   2  44   4 150 198  83 116   0 198 101 119   1 109
   2   5  35 156   2  65  75   0  43  24 100 151 146  75  69  32  57 200
 164  45   8   3 190   0   0  81   2   2   2 166   0  42   0  61   8 106
  91   2   0  65 146  65   0 170  13  27]
[2023-03-18 23:29:04] - Mechanism: gives answer: 
[ 616  523  688  698   42  418   14  686  249  473  728 1112  701  558
   43   14  541  171  797  334  433  267  319  807  126  441  335  154
  845  858   98   42  537  930  301  498  179  932  181  282  182   28
   88  193  424  851  253  518    0  796  307  880  182  782  152  487
  586  633   28  671  367    0  113  103  852  400  466  490  196   85
  132  935  746  446   42  431  585   70  168  310  238  235   97  872
   56  177   14  379  112  323  727  236   28  587  466  227   42  582
  112  183]
[2023-03-18 23:29:04] - Mean Square Error of ground truth and golden standard: 0.37
[2023-03-18 23:29:04] - Mean Square Error of ground truth and mechanism: 150687.78
[2023-03-18 23:29:04] - Mean Square Error of golden standard and mechanism: 150738.81
[2023-03-18 23:29:04] - Measurement1: 0.017837188650453834
[2023-03-18 23:29:04] - Measurement2: 1.0009309748636788
[2023-03-18 23:29:04] - ******** Testing Finished ********
